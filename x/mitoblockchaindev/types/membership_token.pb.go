// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitoblockchaindev/membership_token.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MembershipToken struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                 uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp          string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ActivityName       string `protobuf:"bytes,4,opt,name=activityName,proto3" json:"activityName,omitempty"`
	Score              string `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	Message            string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	MembershipDuration string `protobuf:"bytes,7,opt,name=membershipDuration,proto3" json:"membershipDuration,omitempty"`
	EligibleCompanies  string `protobuf:"bytes,8,opt,name=eligibleCompanies,proto3" json:"eligibleCompanies,omitempty"`
	ExpiryDate         string `protobuf:"bytes,9,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
}

func (m *MembershipToken) Reset()         { *m = MembershipToken{} }
func (m *MembershipToken) String() string { return proto.CompactTextString(m) }
func (*MembershipToken) ProtoMessage()    {}
func (*MembershipToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa8b3d6d955b269e, []int{0}
}
func (m *MembershipToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MembershipToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MembershipToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MembershipToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MembershipToken.Merge(m, src)
}
func (m *MembershipToken) XXX_Size() int {
	return m.Size()
}
func (m *MembershipToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MembershipToken.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipToken proto.InternalMessageInfo

func (m *MembershipToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MembershipToken) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MembershipToken) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *MembershipToken) GetActivityName() string {
	if m != nil {
		return m.ActivityName
	}
	return ""
}

func (m *MembershipToken) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *MembershipToken) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MembershipToken) GetMembershipDuration() string {
	if m != nil {
		return m.MembershipDuration
	}
	return ""
}

func (m *MembershipToken) GetEligibleCompanies() string {
	if m != nil {
		return m.EligibleCompanies
	}
	return ""
}

func (m *MembershipToken) GetExpiryDate() string {
	if m != nil {
		return m.ExpiryDate
	}
	return ""
}

func init() {
	proto.RegisterType((*MembershipToken)(nil), "mitoblockchaindev.mitoblockchaindev.MembershipToken")
}

func init() {
	proto.RegisterFile("mitoblockchaindev/membership_token.proto", fileDescriptor_aa8b3d6d955b269e)
}

var fileDescriptor_aa8b3d6d955b269e = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xeb, 0x7c, 0xfd, 0xf9, 0x6a, 0x21, 0x10, 0x16, 0x83, 0x07, 0x64, 0x55, 0x65, 0x89,
	0x04, 0x4a, 0x07, 0xee, 0x00, 0xca, 0x08, 0x43, 0xc5, 0xc4, 0x82, 0x9c, 0xe4, 0xa8, 0x3d, 0x6a,
	0x1c, 0x5b, 0xb6, 0xa9, 0x9a, 0xbb, 0xe0, 0x3e, 0xb8, 0x11, 0xc6, 0x8e, 0x8c, 0x28, 0xb9, 0x11,
	0x54, 0x17, 0x28, 0x28, 0x8c, 0xef, 0xf3, 0x3e, 0x47, 0x3a, 0x47, 0x87, 0xc6, 0x0a, 0xbd, 0x4e,
	0x0b, 0x9d, 0x2d, 0xb3, 0x85, 0xc4, 0x32, 0x87, 0xd5, 0x44, 0x81, 0x4a, 0xc1, 0xba, 0x05, 0x9a,
	0x47, 0xaf, 0x97, 0x50, 0x26, 0xc6, 0x6a, 0xaf, 0xd9, 0x59, 0xcb, 0x4c, 0x5a, 0x64, 0xfc, 0x12,
	0xd1, 0xa3, 0xdb, 0xef, 0xf9, 0xfb, 0xed, 0x38, 0xe3, 0x74, 0x90, 0x59, 0x90, 0x5e, 0x5b, 0x4e,
	0x46, 0x24, 0x1e, 0xce, 0xbe, 0x22, 0x3b, 0xa4, 0x11, 0xe6, 0x3c, 0x1a, 0x91, 0xb8, 0x3b, 0x8b,
	0x30, 0x67, 0xa7, 0x74, 0xe8, 0x51, 0x81, 0xf3, 0x52, 0x19, 0xfe, 0x2f, 0xb8, 0x7b, 0xc0, 0xc6,
	0xf4, 0x40, 0x66, 0x1e, 0x57, 0xe8, 0xab, 0x3b, 0xa9, 0x80, 0x77, 0x83, 0xf0, 0x8b, 0xb1, 0x13,
	0xda, 0x73, 0x99, 0xb6, 0xc0, 0x7b, 0xa1, 0xdc, 0x85, 0xed, 0x06, 0x0a, 0x9c, 0x93, 0x73, 0xe0,
	0xfd, 0xdd, 0x06, 0x9f, 0x91, 0x25, 0x94, 0xed, 0xcf, 0x9d, 0x3e, 0x59, 0xe9, 0x51, 0x97, 0x7c,
	0x10, 0xa4, 0x3f, 0x1a, 0x76, 0x41, 0x8f, 0xa1, 0xc0, 0x39, 0xa6, 0x05, 0x5c, 0x6b, 0x65, 0x64,
	0x89, 0xe0, 0xf8, 0xff, 0xa0, 0xb7, 0x0b, 0x26, 0x28, 0x85, 0xb5, 0x41, 0x5b, 0x4d, 0xa5, 0x07,
	0x3e, 0x0c, 0xda, 0x0f, 0x72, 0x75, 0xf3, 0x5a, 0x0b, 0xb2, 0xa9, 0x05, 0x79, 0xaf, 0x05, 0x79,
	0x6e, 0x44, 0x67, 0xd3, 0x88, 0xce, 0x5b, 0x23, 0x3a, 0x0f, 0xe7, 0xed, 0xb7, 0xac, 0x27, 0x6d,
	0xe6, 0x2b, 0x03, 0x2e, 0xed, 0x87, 0x07, 0x5d, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x36,
	0x56, 0x24, 0xcc, 0x01, 0x00, 0x00,
}

func (m *MembershipToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MembershipToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpiryDate) > 0 {
		i -= len(m.ExpiryDate)
		copy(dAtA[i:], m.ExpiryDate)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.ExpiryDate)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EligibleCompanies) > 0 {
		i -= len(m.EligibleCompanies)
		copy(dAtA[i:], m.EligibleCompanies)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.EligibleCompanies)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MembershipDuration) > 0 {
		i -= len(m.MembershipDuration)
		copy(dAtA[i:], m.MembershipDuration)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.MembershipDuration)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintMembershipToken(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMembershipToken(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMembershipToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovMembershipToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MembershipToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMembershipToken(uint64(m.Id))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	l = len(m.MembershipDuration)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	l = len(m.EligibleCompanies)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	l = len(m.ExpiryDate)
	if l > 0 {
		n += 1 + l + sovMembershipToken(uint64(l))
	}
	return n
}

func sovMembershipToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMembershipToken(x uint64) (n int) {
	return sovMembershipToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MembershipToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembershipToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MembershipToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MembershipToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembershipDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembershipDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleCompanies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleCompanies = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembershipToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiryDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembershipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMembershipToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMembershipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMembershipToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMembershipToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMembershipToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMembershipToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMembershipToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMembershipToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMembershipToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMembershipToken = fmt.Errorf("proto: unexpected end of group")
)
